# bot.py
# ÿ®Ÿàÿ™ ÿ™ŸäŸÑŸäÿ¨ÿ±ÿßŸÖ ŸÑŸÑÿ™ÿØÿßŸàŸÑ: Spot/Futures + AutoScan + Fast-Runner + ÿ£ŸàÿßŸÖÿ± /mode Ÿà /fubalance

import asyncio
from dataclasses import dataclass
from typing import Optional, List

import pandas as pd
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from config import CFG
from data_providers import PriceProvider
from indicators import rsi, macd
from charting import plot_hourly_with_targets
from news import fetch_top_news
from utils import now_local
from trade_binance import BinanceREST
from strategy import SignalEngine
from scanner import best_symbols, Candidate

# ----------------- ÿ•ÿπÿØÿßÿØÿßÿ™ ŸÖŸÜ CFG ŸÖÿπ ŸÇŸäŸÖ ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© -----------------

TR = CFG.get("TRADING", {})
TP_PCT             = float(TR.get("tp_pct", 0.10))      # ŸáÿØŸÅ ÿ±ÿ®ÿ≠ ÿ£ÿ≥ÿßÿ≥Ÿä 10%
SL_PCT             = float(TR.get("sl_pct", 0.01))      # ŸàŸÇŸÅ ÿÆÿ≥ÿßÿ±ÿ© 1%
TRAIL_PCT          = float(TR.get("trail_pct", 0.02))   # ÿ™ÿ™ÿ®ÿπ 2% ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä
QUOTE_QTY          = float(TR.get("quote_qty", CFG.get("ORDER_QUOTE_QTY", 50)))
COOLDOWN           = int(TR.get("cooldown_s", CFG.get("COOLDOWN_S", 60)))
AUTO_DAYS          = int(TR.get("auto_shutdown_days", CFG.get("AUTO_SHUTDOWN_DAYS", 7)))
FAST_WIN           = int(TR.get("fast_window_s", 180))  # 3 ÿØŸÇÿßÿ¶ŸÇ ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä
PUMP_LOOKBACK_MIN  = int(TR.get("pump_lookback_min", 3))
PUMP_PCT           = float(TR.get("pump_pct", TP_PCT))  # ÿµÿπŸàÿØ ÿ≥ÿ±Ÿäÿπ ‚â• ŸáÿØŸÅ ÿßŸÑÿ±ÿ®ÿ≠
LOCK_EPS           = float(TR.get("lock_eps", 0.002))   # ŸÇŸÅŸÑ ÿ±ÿ®ÿ≠ ÿ£ŸÇŸÑ ŸáÿßŸÖÿ¥ŸäÿßŸã ŸÖŸÜ ÿßŸÑŸáÿØŸÅ

AUTO = CFG.get("AUTOSCAN", {})
AUTOSCAN_ENABLED   = bool(int(AUTO.get("enabled", 1)))
AUTOSCAN_INTERVAL_MIN = int(AUTO.get("interval_min", 60))

# Binance / Futures
BIN = CFG.get("BINANCE", {})
USE_FUTURES   = bool(int(BIN.get("use_futures", CFG.get("USE_FUTURES", 0))))
LEVERAGE      = int(BIN.get("leverage", 10))
MARGIN_TYPE   = BIN.get("margin_type", "ISOLATED")  # ÿ£Ÿà "CROSSED"

# ÿ±ŸÖÿ≤ ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä ÿ•ŸÑŸâ ÿ£ŸÜ ŸäÿπŸÖŸÑ ÿßŸÑÿ≥ŸÉÿßŸÜÿ±
CURRENT_SYMBOL: str = CFG.get("CRYPTO_SYMBOL", "BTCUSDT")

# ----------------- ÿ≠ÿßŸÑÿßÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ -----------------

br = BinanceREST()
engine = SignalEngine(tp_pct=TP_PCT, sl_pct=SL_PCT)

TRADING_ENABLED: bool = False
LAST_KLINES: Optional[pd.DataFrame] = None
LAST_MINUTE: Optional[int] = None
SHUTDOWN_AT = now_local() + pd.Timedelta(days=AUTO_DAYS)
LAST_TRADE_TS = now_local() - pd.Timedelta(seconds=COOLDOWN)
LAST_SCAN: Optional[pd.Timestamp] = None
LAST_BEST: List[Candidate] = []

@dataclass
class Position:
    symbol: str
    qty: float
    entry: float
    sl: float
    high: float
    entry_ts: pd.Timestamp
    fast_mode: bool = False  # Fast-Runner mode

OPEN_POS: Optional[Position] = None

# ----------------- ÿ£ÿØŸàÿßÿ™ ŸÖÿ≥ÿßÿπÿØÿ© -----------------

def _is_admin(update: Update) -> bool:
    try:
        u = update.effective_user
        if not u: return False
        uid_ok = (u.id == CFG.get("TELEGRAM_ADMIN")) if CFG.get("TELEGRAM_ADMIN") else False
        uname_env = (CFG.get("TELEGRAM_ADMIN_USERNAME") or "").lstrip("@").lower()
        uname_ok = (u.username or "").lower() == uname_env if uname_env else False
        return uid_ok or uname_ok
    except Exception:
        return False

async def _fetch_1m(symbol: str):
    prov = PriceProvider()
    df = await asyncio.to_thread(prov.get_recent_1m, symbol, 900)
    return df, symbol

def _pump_fast(close: pd.Series) -> bool:
    if close is None or len(close) < max(PUMP_LOOKBACK_MIN+1, 5):
        return False
    prev = float(close.iloc[-1-PUMP_LOOKBACK_MIN])
    nowv = float(close.iloc[-1])
    return (nowv/prev - 1.0) >= PUMP_PCT

# ----------------- AutoScan -----------------

async def autoscan_tick(context: ContextTypes.DEFAULT_TYPE):
    global LAST_SCAN, LAST_BEST, CURRENT_SYMBOL
    if not AUTOSCAN_ENABLED:
        return
    if LAST_SCAN and (now_local() - LAST_SCAN).total_seconds() < AUTOSCAN_INTERVAL_MIN*60:
        return
    try:
        cands = best_symbols(br)
        if not cands:
            return
        LAST_BEST = cands[:5]
        top = cands[0]
        LAST_SCAN = now_local()
        # ŸÑÿß ŸÜÿ®ÿØŸëŸÑ ÿßŸÑÿ±ŸÖÿ≤ ÿ•ŸÜ ŸÑÿØŸäŸÜÿß ÿµŸÅŸÇÿ© ŸÖŸÅÿ™Ÿàÿ≠ÿ©
        if OPEN_POS is None and top.symbol != CURRENT_SYMBOL:
            old = CURRENT_SYMBOL
            CURRENT_SYMBOL = top.symbol
            await context.bot.send_message(
                chat_id=CFG["TELEGRAM_ADMIN"],
                text=f"üîé AutoScan: ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿ±ŸÖÿ≤ {old} ‚Üí {CURRENT_SYMBOL} (score={top.score:.2f}, 24hŒî={top.change_pct*100:.2f}%)."
            )
    except Exception as e:
        await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"], text=f"‚ö†Ô∏è AutoScan ŸÅÿ¥ŸÑ: {e}")

# ----------------- ŸÖŸÜÿ∑ŸÇ ÿßŸÑÿ™ÿØÿßŸàŸÑ -----------------

async def trade_tick(context: ContextTypes.DEFAULT_TYPE):
    global LAST_KLINES, LAST_MINUTE, OPEN_POS, LAST_TRADE_TS, TRADING_ENABLED

    # ÿ•ŸäŸÇÿßŸÅ ÿ™ŸÑŸÇÿßÿ¶Ÿä ÿ®ÿπÿØ ÿßŸÑŸÖÿØÿ©
    if AUTO_DAYS > 0 and now_local() >= SHUTDOWN_AT and TRADING_ENABLED:
        TRADING_ENABLED = False
        await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"], text="‚èπÔ∏è ÿ™ŸÖ ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ™ÿØÿßŸàŸÑ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ŸÑÿßŸÜÿ™Ÿáÿßÿ° ÿßŸÑŸÖÿØÿ©.")
        return

    if not TRADING_ENABLED:
        return

    symbol = OPEN_POS.symbol if OPEN_POS else CURRENT_SYMBOL

    # ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ¥ŸÖŸàÿπ ÿØŸÇŸäŸÇÿ© ÿ®ÿØŸÇŸäŸÇÿ©
    cur_minute = now_local().minute
    if LAST_KLINES is None or cur_minute != LAST_MINUTE:
        try:
            df, _ = await _fetch_1m(symbol)
            if df is not None and not df.empty:
                LAST_KLINES = df
                LAST_MINUTE = cur_minute
        except Exception as e:
            await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"], text=f"‚ö†Ô∏è ÿ™ÿπÿ∞ÿ± ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ¥ŸÖŸàÿπ: {e}")
            return

    if LAST_KLINES is None or LAST_KLINES.empty:
        return

    close = LAST_KLINES["Close"].astype(float)
    price = float(close.iloc[-1])

    # ÿ•ÿØÿßÿ±ÿ© ÿµŸÅŸÇÿ© ŸÖŸÅÿ™Ÿàÿ≠ÿ©
    if OPEN_POS:
        if price > OPEN_POS.high:
            OPEN_POS.high = price

        since = (now_local() - OPEN_POS.entry_ts).total_seconds()
        hit_10 = price >= OPEN_POS.entry * (1 + TP_PCT)

        # ÿ™ŸÅÿπŸäŸÑ Fast-Runner
        if hit_10 and not OPEN_POS.fast_mode and (since <= FAST_WIN or _pump_fast(close)):
            OPEN_POS.fast_mode = True
            lock = OPEN_POS.entry * (1 + TP_PCT - LOCK_EPS)
            if lock > OPEN_POS.sl:
                OPEN_POS.sl = lock
            await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"],
                text=(f"üèÉ‚Äç‚ôÇÔ∏è Fast-runner ON ({OPEN_POS.symbol}) ‚Äî ŸÇŸÅŸÑ ÿ±ÿ®ÿ≠ +{TP_PCT*100:.0f}%, SL‚â•{OPEN_POS.sl:.6f}"))

        # ŸàŸÇŸÅ ŸÖÿ™ÿ≠ÿ±ŸÉ
        if OPEN_POS.fast_mode:
            trail = OPEN_POS.high * (1 - max(0.0, TRAIL_PCT))
            new_sl = max(OPEN_POS.sl, trail, OPEN_POS.entry*(1 + TP_PCT - LOCK_EPS))
            if new_sl > OPEN_POS.sl:
                OPEN_POS.sl = new_sl

        # ÿÆÿ±Ÿàÿ¨ SL
        if price <= OPEN_POS.sl:
            try:
                if USE_FUTURES:
                    br.futures_order_market(OPEN_POS.symbol, "SELL", OPEN_POS.qty)
                else:
                    br.order_market_sell_qty(OPEN_POS.symbol, qty=OPEN_POS.qty)
                mode = "Fast-runner" if OPEN_POS.fast_mode else "Normal"
                await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"],
                    text=f"üîî ÿÆÿ±Ÿàÿ¨ {mode} {OPEN_POS.symbol} ÿπŸÜÿØ {price:.6f} | ÿ±ÿ®ÿ≠ ŸÖÿ∂ŸÖŸàŸÜ ‚â• {TP_PCT*100:.0f}%")
            except Exception as e:
                await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"], text=f"‚ö†Ô∏è ŸÅÿ¥ŸÑ ÿ®Ÿäÿπ SL: {e}")
            OPEN_POS = None
            LAST_TRADE_TS = now_local()
            return

        # ÿÆÿ±Ÿàÿ¨ TP (ÿπÿßÿØŸä)
        if hit_10 and not OPEN_POS.fast_mode:
            try:
                if USE_FUTURES:
                    br.futures_order_market(OPEN_POS.symbol, "SELL", OPEN_POS.qty)
                else:
                    br.order_market_sell_qty(OPEN_POS.symbol, qty=OPEN_POS.qty)
                await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"],
                    text=f"‚úÖ TP ÿ™ÿ≠ŸÇŸÇ {TP_PCT*100:.0f}% {OPEN_POS.symbol} ÿπŸÜÿØ {price:.6f}")
            except Exception as e:
                await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"], text=f"‚ö†Ô∏è ŸÅÿ¥ŸÑ ÿ®Ÿäÿπ TP: {e}")
            OPEN_POS = None
            LAST_TRADE_TS = now_local()
            return

    # ÿ™ÿ®ÿ±ŸäÿØ ÿ®ŸäŸÜ ÿßŸÑÿµŸÅŸÇÿßÿ™
    if (now_local() - LAST_TRADE_TS).total_seconds() < COOLDOWN:
        return

    # ÿØÿÆŸàŸÑ ÿ¨ÿØŸäÿØ ÿ•ÿ∞ÿß ŸÑÿß ŸäŸàÿ¨ÿØ ÿµŸÅŸÇÿ©
    if OPEN_POS is None:
        df, _ = await _fetch_1m(CURRENT_SYMBOL)
        if df is None or df.empty:
            return
        close = df["Close"].astype(float)
        price = float(close.iloc[-1])
        if engine.entry_long(close):
            try:
                try: br.sync_time()
                except Exception: pass

                if not USE_FUTURES:
                    # ===== Spot =====
                    try:
                        free_usdt = br.balance_free("USDT")
                    except Exception:
                        free_usdt = 0.0

                    f = {}
                    try: f = br.symbol_filters_spot(CURRENT_SYMBOL) or {}
                    except Exception: f = {}
                    min_notional = float(f.get("min_notional", 5.0))

                    desired = float(QUOTE_QTY)
                    eff_quote = min(desired, max(0.0, free_usdt*0.98))
                    if eff_quote < min_notional:
                        await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"],
                            text=f"‚ö†Ô∏è Spot: ÿ±ÿµŸäÿØ ÿ∫Ÿäÿ± ŸÉÿßŸÅŸç. USDT={free_usdt:.2f}ÿå ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ‚â• {min_notional:.2f} USDT.")
                        return

                    eff_quote = float(f"{eff_quote:.2f}")
                    od = br.order_market_buy_quote(CURRENT_SYMBOL, quote_qty=eff_quote)

                    executed_qty = float(od.get("executedQty", 0.0) or 0.0)
                    fills = od.get("fills", [])
                    avg_price = price
                    if fills:
                        qty_sum = sum(float(x.get("qty", 0) or 0) for x in fills)
                        if qty_sum > 0:
                            avg_price = sum(float((x.get("price") or price))*float((x.get("qty") or 0)) for x in fills) / qty_sum
                            executed_qty = qty_sum

                    if executed_qty <= 0:
                        await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"], text="‚ö†Ô∏è Spot: ŸÑŸÖ ÿ™ŸèŸÜŸÅŸëÿ∞ ÿ£Ÿä ŸÉŸÖŸäÿ©.")
                        return

                else:
                    # ===== Futures (USDT-M √ó LEVERAGE) =====
                    try:
                        br.futures_set_margin_type(CURRENT_SYMBOL, MARGIN_TYPE)
                    except Exception:
                        pass
                    try:
                        br.futures_set_leverage(CURRENT_SYMBOL, LEVERAGE)
                    except Exception:
                        pass

                    try:
                        free_usdt = br.futures_balance_usdt()
                    except Exception:
                        free_usdt = 0.0

                    f = {}
                    try: f = br.futures_symbol_filters(CURRENT_SYMBOL) or {}
                    except Exception: f = {}
                    min_notional = float(f.get("min_notional", 5.0))
                    step_size   = float(f.get("step_size", 0.0))

                    desired = float(QUOTE_QTY)
                    eff_quote = min(desired, max(0.0, free_usdt*0.98))
                    raw_qty = (eff_quote * LEVERAGE) / price
                    qty = raw_qty if step_size <= 0 else (int(raw_qty/step_size) * step_size)
                    qty = max(qty, 0.0)

                    if qty*price < min_notional or qty <= 0:
                        await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"],
                            text=(f"‚ö†Ô∏è Futures: ÿßŸÑÿ≠ÿ¨ŸÖ ŸÑÿß Ÿäÿ≠ŸÇŸÇ ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ÿØŸÜŸâ. "
                                  f"qty*price={qty*price:.2f} < {min_notional:.2f}. "
                                  f"freeUSDT={free_usdt:.2f}, desiredQuote={desired:.2f}, lev={LEVERAGE}"))
                        return

                    od = br.futures_order_market(CURRENT_SYMBOL, "BUY", qty)
                    executed_qty = qty
                    avg_price = price

                entry = float(avg_price)
                sl = entry * (1 - SL_PCT)
                OPEN_POS = Position(symbol=CURRENT_SYMBOL, qty=float(executed_qty), entry=entry, sl=sl, high=entry, entry_ts=now_local(), fast_mode=False)
                LAST_TRADE_TS = now_local()

                mode_name = f"Futures x{LEVERAGE}" if USE_FUTURES else "Spot"
                await context.bot.send_message(
                    chat_id=CFG["TELEGRAM_ADMIN"],
                    text=(f"üì• ÿ¥ÿ±ÿßÿ° {CURRENT_SYMBOL} ({mode_name}) | "
                          f"Qty={executed_qty:g} | Entry={entry:.6f} | SL={sl:.6f} | Trailing={TRAIL_PCT*100:.1f}%")
                )

            except Exception as e:
                await context.bot.send_message(chat_id=CFG["TELEGRAM_ADMIN"], text=f"‚ö†Ô∏è ŸÅÿ¥ŸÑ ÿ£ŸÖÿ± ÿßŸÑÿ¥ÿ±ÿßÿ°: {e}")
                return

# ----------------- ÿ£ŸàÿßŸÖÿ± ÿ™ŸäŸÑŸäÿ¨ÿ±ÿßŸÖ -----------------

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ŸÖÿ±ÿ≠ÿ®ÿßŸã üëã\n\n"
        "ÿ®Ÿàÿ™ ÿ™ÿØÿßŸàŸÑ Binance Spot/Futures ŸÖÿπ AutoScan + Fast-Runner.\n"
        "- AutoScan: ŸäÿÆÿ™ÿßÿ± ÿ£ŸÅÿ∂ŸÑ ÿπŸÖŸÑÿ© USDT ÿØŸàÿ±ŸäÿßŸã.\n"
        "- Fast-Runner: ÿπŸÜÿØ +ŸáÿØŸÅ ÿ≥ÿ±Ÿäÿπÿå ŸÜŸÇŸÅŸÑ ÿßŸÑÿ±ÿ®ÿ≠ ŸàŸÜŸàÿßÿµŸÑ ÿ®ŸàŸÇŸÅ ŸÖÿ™ÿ≠ÿ±ŸÉ.\n"
        "ÿßŸÑÿ£ŸàÿßŸÖÿ±:\n"
        "/go ‚Äî ÿ™ÿ¥ÿ∫ŸäŸÑ (ÿ£ÿØŸÖŸÜ)\n"
        "/stop ‚Äî ÿ•ŸäŸÇÿßŸÅ (ÿ£ÿØŸÖŸÜ)\n"
        "/status ‚Äî ÿßŸÑÿ≠ÿßŸÑÿ©\n"
        "/chart ‚Äî ÿ¥ÿßÿ±ÿ™ ÿ≥ÿßÿπÿ©\n"
        "/news ‚Äî ÿ£ÿÆÿ®ÿßÿ±\n"
        "/best ‚Äî ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖÿ±ÿ¥ÿ≠ŸäŸÜ ÿßŸÑÿ¢ŸÜ\n"
        "/autoscan ‚Äî ÿπÿ±ÿ∂/ÿ∂ÿ®ÿ∑ ÿßŸÑÿ≠ÿßŸÑÿ©\n"
        "/mode ‚Äî ÿ•ÿ∏Ÿáÿßÿ± Ÿàÿ∂ÿπ Spot/Futures ŸàÿßŸÑÿ±ÿßŸÅÿπÿ©\n"
        "/fubalance ‚Äî ÿ±ÿµŸäÿØ USDT-M Futures\n"
    )

async def cmd_go(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        await update.message.reply_text("üö´ ÿ∫Ÿäÿ± ŸÖŸèÿµÿ±Ÿëÿ≠ ‚Äî ŸÑŸÑÿ£ÿØŸÖŸÜ ŸÅŸÇÿ∑.")
        return
    global TRADING_ENABLED
    TRADING_ENABLED = True
    await update.message.reply_text("‚ñ∂Ô∏è ÿ™ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ™ÿØÿßŸàŸÑ.")

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        await update.message.reply_text("üö´ ÿ∫Ÿäÿ± ŸÖŸèÿµÿ±Ÿëÿ≠ ‚Äî ŸÑŸÑÿ£ÿØŸÖŸÜ ŸÅŸÇÿ∑.")
        return
    global TRADING_ENABLED
    TRADING_ENABLED = False
    await update.message.reply_text("‚èπÔ∏è ÿ™ŸÖ ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ™ÿØÿßŸàŸÑ.")

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    sym = OPEN_POS.symbol if OPEN_POS else CURRENT_SYMBOL
    df, _ = await _fetch_1m(sym)
    if df is None or df.empty:
        await update.message.reply_text("ŸÑÿß ÿ™ÿ™ŸàŸÅÿ± ÿ®ŸäÿßŸÜÿßÿ™ ŸÉÿßŸÅŸäÿ© ÿßŸÑÿ¢ŸÜ.")
        return
    last = float(df['Close'].iloc[-1])
    open_line = "ŸÑÿß ÿ™Ÿàÿ¨ÿØ" if OPEN_POS is None else (
        f"{OPEN_POS.symbol} | Qty={OPEN_POS.qty}, Entry={OPEN_POS.entry:.6f}, SL={OPEN_POS.sl:.6f}, High={OPEN_POS.high:.6f}, Fast={OPEN_POS.fast_mode}"
    )
    await update.message.reply_text(
        f"‚è± {now_local():%Y-%m-%d %H:%M} ({CFG['TZ']})\n"
        f"üí± ÿßŸÑÿ±ŸÖÿ≤ ÿßŸÑÿ≠ÿßŸÑŸä: {sym}\n"
        f"üìà ÿßŸÑÿ≥ÿπÿ±: {last:.6f}\n"
        f"ü§ñ ÿßŸÑÿ™ÿØÿßŸàŸÑ: {'ŸÜÿ¥ÿ∑' if TRADING_ENABLED else 'ŸÖÿ™ŸàŸÇŸÅ'} | üîé AutoScan: {'ON' if AUTOSCAN_ENABLED else 'OFF'}\n"
        f"üì¶ ÿßŸÑÿµŸÅŸÇÿ© ÿßŸÑŸÖŸÅÿ™Ÿàÿ≠ÿ©: {open_line}"
    )

async def cmd_chart(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    sym = OPEN_POS.symbol if OPEN_POS else CURRENT_SYMBOL
    df, _ = await _fetch_1m(sym)
    if df is None or df.empty:
        await update.message.reply_text("ŸÑÿß ÿ™ÿ™ŸàŸÅÿ± ÿ®ŸäÿßŸÜÿßÿ™ ŸÉÿßŸÅŸäÿ© ŸÑÿπÿ±ÿ∂ ÿßŸÑÿ¥ÿßÿ±ÿ™ ÿ≠ÿßŸÑŸäÿßŸã.")
        return
    last = float(df['Close'].iloc[-1])
    targets = [last*(1+TP_PCT), last*(1+TP_PCT*1.5), last*(1+TP_PCT*2.0)]
    stop = last*(1-SL_PCT)
    df_h = df.resample("60T").agg({"Open":"first","High":"max","Low":"min","Close":"last","Volume":"sum"}).dropna()
    img = plot_hourly_with_targets(df_h, targets, stop, title=f"{sym} H1 ‚Äî Targets & Trailing")
    await update.message.reply_photo(photo=img, caption=f"{sym} ‚Äî ÿßŸÑŸÖÿµÿØÿ±: Binance")

async def cmd_news(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    items = await fetch_top_news(limit=6, lang="en")
    await update.message.reply_text("\n\n".join(items))

async def cmd_best(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global LAST_BEST
    if not LAST_BEST:
        try:
            LAST_BEST = best_symbols(br)[:5]
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è ÿ™ÿπÿ∞ÿ± ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ±ÿ¥ÿ≠ŸäŸÜ: {e}")
            return
    lines = [f"ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖÿ±ÿ¥ÿ≠ŸäŸÜ (ÿ¢ÿÆÿ± ŸÅÿ≠ÿµ):"]
    for i, c in enumerate(LAST_BEST, start=1):
        lines.append(f"{i}) {c.symbol} | score={c.score:.2f} | 24hŒî={c.change_pct*100:.2f}% | vol‚âà{c.quote_vol:,.0f} USDT")
    lines.append(f"üîé ÿßŸÑÿ±ŸÖÿ≤ ÿßŸÑÿ≠ÿßŸÑŸä: {OPEN_POS.symbol if OPEN_POS else CURRENT_SYMBOL}")
    await update.message.reply_text("\n".join(lines))

async def cmd_autoscan(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global AUTOSCAN_ENABLED
    text = (update.message.text or "").strip().lower()
    if " on" in text:
        AUTOSCAN_ENABLED = True
        await update.message.reply_text("üîé AutoScan: ON")
    elif " off" in text:
        AUTOSCAN_ENABLED = False
        await update.message.reply_text("üîé AutoScan: OFF")
    else:
        await update.message.reply_text(f"üîé AutoScan: {'ON' if AUTOSCAN_ENABLED else 'OFF'} (interval={AUTOSCAN_INTERVAL_MIN}m)")

async def cmd_debug(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        await update.message.reply_text("üö´ ÿ∫Ÿäÿ± ŸÖŸèÿµÿ±Ÿëÿ≠ ‚Äî ŸÑŸÑÿ£ÿØŸÖŸÜ ŸÅŸÇÿ∑.")
        return
    df, _ = await _fetch_1m(CURRENT_SYMBOL)
    lines = [f"ÿßŸÑŸÖÿµÿØÿ±: Binance", f"SymbolNow: {CURRENT_SYMBOL}", f"ÿµŸÅŸàŸÅ 1m: {0 if df is None else len(df)}"]
    if df is not None and not df.empty:
        lines.append(f"ÿ£ŸàŸÑ ÿ¥ŸÖÿπÿ©: {df.index[0]}")
        lines.append(f"ÿ¢ÿÆÿ± ÿ¥ŸÖÿπÿ©: {df.index[-1]}")
    await update.message.reply_text("\n".join(lines))

async def cmd_mode(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    sym = OPEN_POS.symbol if OPEN_POS else CURRENT_SYMBOL
    if USE_FUTURES:
        try:
            pmode = br.futures_get_position_mode()
        except Exception:
            pmode = BIN.get("position_mode", "ONEWAY")
        try:
            lev = br.futures_get_symbol_leverage(sym)
        except Exception:
            lev = None
        lev_str = str(lev) if lev else str(LEVERAGE)
        msg = (
            "‚öôÔ∏è ÿßŸÑŸàÿ∂ÿπ: Futures (USDT-M)\n"
            f"üìå Position Mode: {pmode}\n"
            f"ü™ô Leverage: x{lev_str}\n"
            f"üè¶ Margin: {MARGIN_TYPE}\n"
            f"üí± ÿßŸÑÿ±ŸÖÿ≤ ÿßŸÑÿ≠ÿßŸÑŸä: {sym}\n"
            f"ü§ñ ÿßŸÑÿ™ÿØÿßŸàŸÑ: {'ŸÜÿ¥ÿ∑' if TRADING_ENABLED else 'ŸÖÿ™ŸàŸÇŸÅ'} | üîé AutoScan: {'ON' if AUTOSCAN_ENABLED else 'OFF'}"
        )
    else:
        msg = (
            "‚öôÔ∏è ÿßŸÑŸàÿ∂ÿπ: Spot\n"
            f"üí± ÿßŸÑÿ±ŸÖÿ≤ ÿßŸÑÿ≠ÿßŸÑŸä: {sym}\n"
            f"ü§ñ ÿßŸÑÿ™ÿØÿßŸàŸÑ: {'ŸÜÿ¥ÿ∑' if TRADING_ENABLED else 'ŸÖÿ™ŸàŸÇŸÅ'} | üîé AutoScan: {'ON' if AUTOSCAN_ENABLED else 'OFF'}"
        )
    await update.message.reply_text(msg)

async def cmd_fubalance(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not USE_FUTURES:
        await update.message.reply_text("ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸäÿπŸÖŸÑ Spot ÿ≠ÿßŸÑŸäÿßŸã. ŸÅÿπŸëŸÑ USE_FUTURES=1 ŸÅŸä .env ÿ´ŸÖ ÿ£ÿπÿØ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ.")
        return
    try:
        bal = br.futures_balance_usdt()
        await update.message.reply_text(f"üí∞ USDT-M Futures availableBalance: {bal:.2f} USDT")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è ÿ™ÿπÿ∞Ÿëÿ± ÿ¨ŸÑÿ® ÿ±ÿµŸäÿØ Futures: {e}")

# ----------------- ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ -----------------

def main():
    token = CFG.get("TELEGRAM_TOKEN", "")
    if not token:
        raise SystemExit("ÿ∂ÿπ TELEGRAM_BOT_TOKEN ŸÅŸä .env")

    app = Application.builder().token(token).build()

    # ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ŸàÿßŸÖÿ± (Handlers)
    app.add_handler(CommandHandler("start",    cmd_start))
    app.add_handler(CommandHandler("go",       cmd_go))
    app.add_handler(CommandHandler("stop",     cmd_stop))
    app.add_handler(CommandHandler("status",   cmd_status))
    app.add_handler(CommandHandler("chart",    cmd_chart))
    app.add_handler(CommandHandler("news",     cmd_news))
    app.add_handler(CommandHandler("best",     cmd_best))
    app.add_handler(CommandHandler("autoscan", cmd_autoscan))
    app.add_handler(CommandHandler("debug",    cmd_debug))
    app.add_handler(CommandHandler("mode",     cmd_mode))
    app.add_handler(CommandHandler("fubalance",cmd_fubalance))

    # JobQueue: AutoScan + ÿßŸÑÿ™ÿØÿßŸàŸÑ
    if app.job_queue is None:
        print('‚ö†Ô∏è JobQueue ÿ∫Ÿäÿ± ŸÖŸÅÿπŸëŸÑ. ÿ´ÿ®Ÿëÿ™: pip install "python-telegram-bot[job-queue]==21.4"')
    else:
        app.job_queue.run_repeating(autoscan_tick, interval=AUTOSCAN_INTERVAL_MIN*60, first=5)
        app.job_queue.run_repeating(trade_tick,    interval=5,                     first=10)

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
